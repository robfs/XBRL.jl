var documenterSearchIndex = {"docs":
[{"location":"transformations/#Transformations","page":"Transformations","title":"Transformations","text":"","category":"section"},{"location":"transformations/","page":"Transformations","title":"Transformations","text":"Modules = [XbrlXML.Transformations]\nOrder   = [:module, :type, :function]\nPages   = [\"Transformations.jl\"]","category":"page"},{"location":"transformations/#XbrlXML.Transformations","page":"Transformations","title":"XbrlXML.Transformations","text":"Handle fact transformations.\n\nWhat are fact transformation rules? In iXBRL filers are allowed to tag textual values like \"one million\" or \"17th of January 2022\". In XBRL those facts would be represented in a normalized manner (1000000, 2022-01-17). To normalize the text values, the iXBRL specification provides for so-called transformation rules. The transformation rule \"zerodash\" for example tells us that the tagged char \"-\" has a normalized value of 0.\n\nThe transformation rules are collected in a so-called transformation rule registry. As of writing SEC Edgar supports the following registries:\n\nName: XII Transformation Registry 3 Prefix: ixt Namespace: http://www.xbrl.org/inlineXBRL/transformation/2015-02-26\n\nName: XII Transformation Registry 4 Prefix: ixt Namespace: http://www.xbrl.org/inlineXBRL/transformation/2020-02-12\n\nName: SEC Specific Transformation Registry Prefix: ixt-sec Namespace: http://www.sec.gov/inlineXBRL/transformation/2015-08-31\n\n\n\n\n\n","category":"module"},{"location":"instance/#Instance","page":"Instance","title":"Instance","text":"","category":"section"},{"location":"instance/","page":"Instance","title":"Instance","text":"Modules = [XbrlXML.Instance]\nOrder   = [:module, :type, :function]\nPages   = [\"Instance.jl\"]","category":"page"},{"location":"taxonomy/#Taxonomy","page":"Taxonomy","title":"Taxonomy","text":"","category":"section"},{"location":"taxonomy/","page":"Taxonomy","title":"Taxonomy","text":"Modules = [XbrlXML.Taxonomy]\nOrder   = [:module, :type, :function]\nPages   = [\"Taxonomy.jl\"]","category":"page"},{"location":"taxonomy/#XbrlXML.Taxonomy.parsetaxonomy","page":"Taxonomy","title":"XbrlXML.Taxonomy.parsetaxonomy","text":"parsetaxonomy(schema_path, cache::HttpCache, schema_url=nothing)::TaxonomySchema\n\nParse a given taxonomy\n\n\n\n\n\n","category":"function"},{"location":"#XbrlXML.jl","page":"Home","title":"XbrlXML.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: forthebadge)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Stable) (Image: Dev) (Image: Build Status) (Image: Coverage)","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"A pure Julia implementation of the py-xbrl Python package by Manuel Schmidt.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg\n\njulia> Pkg.add(\"XbrlXML\")","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using XbrlXML\n\njulia> cache = HttpCache(\"/Users/robsimms/cache/\")\n/Users/robsimms/cache/\n\njulia> header!(cache, \"User-Agent\" => \"You, yourname@domain.com\")\nDict{String, String} with 1 entry:\n  \"User-Agent\" => \"You, yourname@domain.com\"\n\njulia> url = \"https://www.sec.gov/Archives/edgar/data/0000789019/000156459021002316/msft-10q_20201231.htm\";\n\njulia> xbrl = parseinstance(cache, url)\nmsft-10q_20201231.htm with 1574 facts\n\njulia> msft = facts(xbrl);\n\njulia> msft[4]\nEntityCommonStockSharesOutstanding: 7,542,215,767","category":"page"},{"location":"cache/#Cache","page":"Cache","title":"Cache","text":"","category":"section"},{"location":"cache/","page":"Cache","title":"Cache","text":"Modules = [XbrlXML.Cache]\nOrder   = [:module, :type, :function]\nPages   = [\"Cache.jl\"]","category":"page"},{"location":"cache/#XbrlXML.Cache","page":"Cache","title":"XbrlXML.Cache","text":"Interface to local store of files used for parsing XBRL.\n\n\n\n\n\n","category":"module"},{"location":"cache/#XbrlXML.Cache.HttpCache","page":"Cache","title":"XbrlXML.Cache.HttpCache","text":"HttpCache(cache_dir=\"./cache/\", headers=Dict())\n\nCreate a cache to store files locally for reuse.\n\nheaders are passed to http Downloads.download. Services such as SEC require you to disclose information about your application.\n\nExample\n\njulia> using XbrlXML\n\njulia> cache = HttpCache(\"/Users/user/cache/\")\n/Users/user/cache/\n\n\n\n\n\n","category":"type"},{"location":"cache/#XbrlXML.Cache.cache_edgar_enclosure-Tuple{HttpCache, String}","page":"Cache","title":"XbrlXML.Cache.cache_edgar_enclosure","text":"cache_edgar_enclosure(cache::HttpCache, enclosure_url)\n\nCache the zip folder from SEC containing all XBRL related files for a given submissions.\n\nDue to the fact that the zip compression is very effective on xbrl submissions that naturally contain repeating text, it is way more efficient to download the zip folder and extract it. This will most often be the most efficient method for downloading the submission. One way to get the zip enclosure url is through the Structured Disclosure RSS Feeds provided by the SEC: https://www.sec.gov/structureddata/rss-feeds-submitted-filings\n\n\n\n\n\n","category":"method"},{"location":"cache/#XbrlXML.Cache.cachedir-Tuple{HttpCache}","page":"Cache","title":"XbrlXML.Cache.cachedir","text":"cachedir(cache::HttpCache)::String\n\nReturn the local directory of a cache.\n\nExample\n\njulia> using XbrlXML\n\njulia> cache = HttpCache(\"/Users/user/cache/\");\n\njulia> cachedir(cache)\n\"/Users/user/cache/\"\n\n\n\n\n\n","category":"method"},{"location":"cache/#XbrlXML.Cache.cachefile-Tuple{HttpCache, String}","page":"Cache","title":"XbrlXML.Cache.cachefile","text":"cachefile(cache::HttpCache, file_url)::String\n\nSave a file located at file_url to a local cache.\n\n\n\n\n\n","category":"method"},{"location":"cache/#XbrlXML.Cache.find_entry_file-Tuple{HttpCache, String}","page":"Cache","title":"XbrlXML.Cache.find_entry_file","text":"find_entry_file(cache::HttpCache, dirpath::String)::Union{String,Nothing}\n\nFind the most likely entry file in provided filing directory.\n\nThis function only works for enclosed SEC submissions that where already downloaded. Will return only the most likely file path for the instance document.\n\n\n\n\n\n","category":"method"},{"location":"cache/#XbrlXML.Cache.header!-Tuple{HttpCache, Pair{String, String}}","page":"Cache","title":"XbrlXML.Cache.header!","text":"header!(cache::HttpCache, header::Pair)::Dict\n\nAdd a header pair to a cache and return the headers.\n\nExample\n\njulia> using XbrlXML\n\njulia> cache = HttpCache(\"/Users/user/cache/\");\n\njulia> header!(cache, \"User-Agent\" => \"You youremail@domain.com\")\nDict{String, String} with 1 entry:\n  \"User-Agent\" => \"You youremail@domain.com\"\n\n\n\n\n\n","category":"method"},{"location":"cache/#XbrlXML.Cache.headers!-Tuple{HttpCache, Vector{Pair{String, String}}}","page":"Cache","title":"XbrlXML.Cache.headers!","text":"headers!(cache::HttpCache, header::Vector{Pair})::Dict\n\nAdd multiple header pairs to a cache and return the headers.\n\nExample\n\njulia> using XbrlXML\n\njulia> cache = HttpCache(\"/Users/user/cache/\");\n\njulia> newheaders = [\"User-Agent\" => \"You youremail@domain.com\", \"From\" => \"You\"];\n\njulia> headers!(cache, newheaders)\nDict{String, String} with 2 entries:\n  \"From\"       => \"You\"\n  \"User-Agent\" => \"You youremail@domain.com\"\n\n\n\n\n\n","category":"method"},{"location":"cache/#XbrlXML.Cache.headers-Tuple{HttpCache}","page":"Cache","title":"XbrlXML.Cache.headers","text":"headers(cache::HttpCache)::Dict\n\nReturn the headers of a cache.\n\nExample\n\njulia> using XbrlXML\n\njulia> cache = HttpCache(\"/Users/user/cache/\");\n\njulia> header!(cache, \"User-Agent\" => \"You youremail@domain.com\");\n\njulia> headers(cache)\nDict{String, String} with 1 entry:\n  \"User-Agent\" => \"You youremail@domain.com\"\n\n\n\n\n\n","category":"method"},{"location":"cache/#XbrlXML.Cache.purgefile-Tuple{HttpCache, String}","page":"Cache","title":"XbrlXML.Cache.purgefile","text":"purgefile(cache::HttpCache, file_url)::Bool\n\nRemove a file, based on its URL, from a local cache.\n\n\n\n\n\n","category":"method"},{"location":"cache/#XbrlXML.Cache.urltopath-Tuple{HttpCache, String}","page":"Cache","title":"XbrlXML.Cache.urltopath","text":"urltopath(cache::HttpCache, url)::String\n\nConvert a file's url to a local cache file.\n\n\n\n\n\n","category":"method"},{"location":"linkbases/#Linkbases","page":"Linkbases","title":"Linkbases","text":"","category":"section"},{"location":"linkbases/","page":"Linkbases","title":"Linkbases","text":"Modules = [XbrlXML.Linkbases]\nOrder   = [:module, :type, :function]\nPages   = [\"Linkbases.jl\"]","category":"page"}]
}
